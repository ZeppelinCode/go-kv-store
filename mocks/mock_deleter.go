// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ZeppelinCode/go-kv-store/src/dbs/fsint (interfaces: DocumentDeleter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	dbstructs "github.com/ZeppelinCode/go-kv-store/src/dbs/dbstructs"
)

// MockDocumentDeleter is a mock of DocumentDeleter interface
type MockDocumentDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentDeleterMockRecorder
}

// MockDocumentDeleterMockRecorder is the mock recorder for MockDocumentDeleter
type MockDocumentDeleterMockRecorder struct {
	mock *MockDocumentDeleter
}

// NewMockDocumentDeleter creates a new mock instance
func NewMockDocumentDeleter(ctrl *gomock.Controller) *MockDocumentDeleter {
	mock := &MockDocumentDeleter{ctrl: ctrl}
	mock.recorder = &MockDocumentDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocumentDeleter) EXPECT() *MockDocumentDeleterMockRecorder {
	return m.recorder
}

// DeleteDocument mocks base method
func (m *MockDocumentDeleter) DeleteDocument(arg0 *dbstructs.Document) []dbstructs.FreeSpace {
	ret := m.ctrl.Call(m, "DeleteDocument", arg0)
	ret0, _ := ret[0].([]dbstructs.FreeSpace)
	return ret0
}

// DeleteDocument indicates an expected call of DeleteDocument
func (mr *MockDocumentDeleterMockRecorder) DeleteDocument(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockDocumentDeleter)(nil).DeleteDocument), arg0)
}
